-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Syntax/GRIN/Par.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	%start_pBinding -> Binding                         (1)
	%start_pListBinding -> ListBinding                 (2)
	%start_pListVar -> ListVar                         (3)
	%start_pExp -> Exp                                 (4)
	%start_pCaseExp -> CaseExp                         (5)
	%start_pListCaseExp -> ListCaseExp                 (6)
	%start_pExp1 -> Exp1                               (7)
	%start_pSimpleVal -> SimpleVal                     (8)
	%start_pListSimpleVal -> ListSimpleVal             (9)
	%start_pVal -> Val                                 (10)
	%start_pLPat -> LPat                               (11)
	%start_pCPat -> CPat                               (12)
	%start_pLiteral -> Literal                         (13)
	Integer -> L_integ                                 (14)
	Tag -> L_Tag                                       (15)
	Var -> L_Var                                       (16)
	Program -> ListBinding                             (17)
	Binding -> Var ListVar '=' '{' Exp '}'             (18)
	ListBinding ->                                     (19)
	ListBinding -> Binding                             (20)
	ListBinding -> Binding ';' ListBinding             (21)
	ListVar ->                                         (22)
	ListVar -> Var ListVar                             (23)
	Exp -> Exp1 '$' 'λ' LPat '→' ';' Exp               (24)
	Exp -> 'case' Val 'of' '{' ListCaseExp '}'         (25)
	Exp -> Exp1                                        (26)
	CaseExp -> CPat '→' '{' Exp '}'                    (27)
	ListCaseExp ->                                     (28)
	ListCaseExp -> CaseExp                             (29)
	ListCaseExp -> CaseExp ';' ListCaseExp             (30)
	Exp1 -> Var ListSimpleVal                          (31)
	Exp1 -> 'unit' Val                                 (32)
	Exp1 -> 'store' Val                                (33)
	Exp1 -> 'fetch' Var                                (34)
	Exp1 -> 'update' Var Val                           (35)
	Exp1 -> '(' Exp ')'                                (36)
	SimpleVal -> Literal                               (37)
	SimpleVal -> Var                                   (38)
	ListSimpleVal ->                                   (39)
	ListSimpleVal -> SimpleVal ListSimpleVal           (40)
	Val -> '(' Tag ListSimpleVal ')'                   (41)
	Val -> '(' Var ListSimpleVal ')'                   (42)
	Val -> Tag                                         (43)
	Val -> '()'                                        (44)
	Val -> SimpleVal                                   (45)
	LPat -> Val                                        (46)
	CPat -> '(' Tag ListVar ')'                        (47)
	CPat -> Tag                                        (48)
	CPat -> Literal                                    (49)
	Literal -> Integer                                 (50)
	Literal -> 'False'                                 (51)
	Literal -> 'True'                                  (52)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'$'            { PT _ (TS _ 1) }
	'('            { PT _ (TS _ 2) }
	'()'           { PT _ (TS _ 3) }
	')'            { PT _ (TS _ 4) }
	';'            { PT _ (TS _ 5) }
	'='            { PT _ (TS _ 6) }
	'False'        { PT _ (TS _ 7) }
	'True'         { PT _ (TS _ 8) }
	'case'         { PT _ (TS _ 9) }
	'fetch'        { PT _ (TS _ 10) }
	'of'           { PT _ (TS _ 11) }
	'store'        { PT _ (TS _ 12) }
	'unit'         { PT _ (TS _ 13) }
	'update'       { PT _ (TS _ 14) }
	'{'            { PT _ (TS _ 15) }
	'}'            { PT _ (TS _ 16) }
	'λ'            { PT _ (TS _ 17) }
	'→'            { PT _ (TS _ 18) }
	L_integ        { PT _ (TI $$) }
	L_Tag          { PT _ (T_Tag $$) }
	L_Var          { PT _ (T_Var $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	%start_pBinding rule  1
	%start_pListBinding rule  2
	%start_pListVar rule  3
	%start_pExp     rule  4
	%start_pCaseExp rule  5
	%start_pListCaseExp rule  6
	%start_pExp1    rule  7
	%start_pSimpleVal rule  8
	%start_pListSimpleVal rule  9
	%start_pVal     rule  10
	%start_pLPat    rule  11
	%start_pCPat    rule  12
	%start_pLiteral rule  13
	Integer         rule  14
	Tag             rule  15
	Var             rule  16
	Program         rule  17
	Binding         rule  18
	ListBinding     rules 19, 20, 21
	ListVar         rules 22, 23
	Exp             rules 24, 25, 26
	CaseExp         rule  27
	ListCaseExp     rules 28, 29, 30
	Exp1            rules 31, 32, 33, 34, 35, 36
	SimpleVal       rules 37, 38
	ListSimpleVal   rules 39, 40
	Val             rules 41, 42, 43, 44, 45
	LPat            rule  46
	CPat            rules 47, 48, 49
	Literal         rules 50, 51, 52

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	L_Var          shift, and enter state 33
	%eof           reduce using rule 19

	Var            goto state 54
	Program        goto state 58
	Binding        goto state 55
	ListBinding    goto state 59

State 1

	%start_pBinding -> . Binding                        (rule 1)

	L_Var          shift, and enter state 33

	Var            goto state 54
	Binding        goto state 57

State 2

	%start_pListBinding -> . ListBinding                (rule 2)

	L_Var          shift, and enter state 33
	%eof           reduce using rule 19

	Var            goto state 54
	Binding        goto state 55
	ListBinding    goto state 56

State 3

	%start_pListVar -> . ListVar                        (rule 3)

	L_Var          shift, and enter state 33
	%eof           reduce using rule 22

	Var            goto state 52
	ListVar        goto state 53

State 4

	%start_pExp -> . Exp                                (rule 4)

	'('            shift, and enter state 40
	'case'         shift, and enter state 51
	'fetch'        shift, and enter state 41
	'store'        shift, and enter state 42
	'unit'         shift, and enter state 43
	'update'       shift, and enter state 44
	L_Var          shift, and enter state 33

	Var            goto state 38
	Exp            goto state 49
	Exp1           goto state 50

State 5

	%start_pCaseExp -> . CaseExp                        (rule 5)

	'('            shift, and enter state 23
	'False'        shift, and enter state 18
	'True'         shift, and enter state 19
	L_integ        shift, and enter state 15
	L_Tag          shift, and enter state 24

	Integer        goto state 16
	Tag            goto state 20
	CaseExp        goto state 48
	CPat           goto state 47
	Literal        goto state 22

State 6

	%start_pListCaseExp -> . ListCaseExp                (rule 6)

	'('            shift, and enter state 23
	'False'        shift, and enter state 18
	'True'         shift, and enter state 19
	L_integ        shift, and enter state 15
	L_Tag          shift, and enter state 24
	%eof           reduce using rule 28

	Integer        goto state 16
	Tag            goto state 20
	CaseExp        goto state 45
	ListCaseExp    goto state 46
	CPat           goto state 47
	Literal        goto state 22

State 7

	%start_pExp1 -> . Exp1                              (rule 7)

	'('            shift, and enter state 40
	'fetch'        shift, and enter state 41
	'store'        shift, and enter state 42
	'unit'         shift, and enter state 43
	'update'       shift, and enter state 44
	L_Var          shift, and enter state 33

	Var            goto state 38
	Exp1           goto state 39

State 8

	%start_pSimpleVal -> . SimpleVal                    (rule 8)

	'False'        shift, and enter state 18
	'True'         shift, and enter state 19
	L_integ        shift, and enter state 15
	L_Var          shift, and enter state 33

	Integer        goto state 16
	Var            goto state 26
	SimpleVal      goto state 37
	Literal        goto state 30

State 9

	%start_pListSimpleVal -> . ListSimpleVal            (rule 9)

	'False'        shift, and enter state 18
	'True'         shift, and enter state 19
	L_integ        shift, and enter state 15
	L_Var          shift, and enter state 33
	%eof           reduce using rule 39

	Integer        goto state 16
	Var            goto state 26
	SimpleVal      goto state 35
	ListSimpleVal  goto state 36
	Literal        goto state 30

State 10

	%start_pVal -> . Val                                (rule 10)

	'('            shift, and enter state 31
	'()'           shift, and enter state 32
	'False'        shift, and enter state 18
	'True'         shift, and enter state 19
	L_integ        shift, and enter state 15
	L_Tag          shift, and enter state 24
	L_Var          shift, and enter state 33

	Integer        goto state 16
	Tag            goto state 25
	Var            goto state 26
	SimpleVal      goto state 27
	Val            goto state 34
	Literal        goto state 30

State 11

	%start_pLPat -> . LPat                              (rule 11)

	'('            shift, and enter state 31
	'()'           shift, and enter state 32
	'False'        shift, and enter state 18
	'True'         shift, and enter state 19
	L_integ        shift, and enter state 15
	L_Tag          shift, and enter state 24
	L_Var          shift, and enter state 33

	Integer        goto state 16
	Tag            goto state 25
	Var            goto state 26
	SimpleVal      goto state 27
	Val            goto state 28
	LPat           goto state 29
	Literal        goto state 30

State 12

	%start_pCPat -> . CPat                              (rule 12)

	'('            shift, and enter state 23
	'False'        shift, and enter state 18
	'True'         shift, and enter state 19
	L_integ        shift, and enter state 15
	L_Tag          shift, and enter state 24

	Integer        goto state 16
	Tag            goto state 20
	CPat           goto state 21
	Literal        goto state 22

State 13

	%start_pLiteral -> . Literal                        (rule 13)

	'False'        shift, and enter state 18
	'True'         shift, and enter state 19
	L_integ        shift, and enter state 15

	Integer        goto state 16
	Literal        goto state 17

State 14

	Integer -> . L_integ                                (rule 14)

	L_integ        shift, and enter state 15


State 15

	Integer -> L_integ .                                (rule 14)

	'$'            reduce using rule 14
	')'            reduce using rule 14
	'False'        reduce using rule 14
	'True'         reduce using rule 14
	'of'           reduce using rule 14
	'}'            reduce using rule 14
	'→'            reduce using rule 14
	L_integ        reduce using rule 14
	L_Var          reduce using rule 14
	%eof           reduce using rule 14


State 16

	Literal -> Integer .                                (rule 50)

	'$'            reduce using rule 50
	')'            reduce using rule 50
	'False'        reduce using rule 50
	'True'         reduce using rule 50
	'of'           reduce using rule 50
	'}'            reduce using rule 50
	'→'            reduce using rule 50
	L_integ        reduce using rule 50
	L_Var          reduce using rule 50
	%eof           reduce using rule 50


State 17

	%start_pLiteral -> Literal .                        (rule 13)

	%eof           accept


State 18

	Literal -> 'False' .                                (rule 51)

	'$'            reduce using rule 51
	')'            reduce using rule 51
	'False'        reduce using rule 51
	'True'         reduce using rule 51
	'of'           reduce using rule 51
	'}'            reduce using rule 51
	'→'            reduce using rule 51
	L_integ        reduce using rule 51
	L_Var          reduce using rule 51
	%eof           reduce using rule 51


State 19

	Literal -> 'True' .                                 (rule 52)

	'$'            reduce using rule 52
	')'            reduce using rule 52
	'False'        reduce using rule 52
	'True'         reduce using rule 52
	'of'           reduce using rule 52
	'}'            reduce using rule 52
	'→'            reduce using rule 52
	L_integ        reduce using rule 52
	L_Var          reduce using rule 52
	%eof           reduce using rule 52


State 20

	CPat -> Tag .                                       (rule 48)

	'→'            reduce using rule 48
	%eof           reduce using rule 48


State 21

	%start_pCPat -> CPat .                              (rule 12)

	%eof           accept


State 22

	CPat -> Literal .                                   (rule 49)

	'→'            reduce using rule 49
	%eof           reduce using rule 49


State 23

	CPat -> '(' . Tag ListVar ')'                       (rule 47)

	L_Tag          shift, and enter state 24

	Tag            goto state 76

State 24

	Tag -> L_Tag .                                      (rule 15)

	'$'            reduce using rule 15
	')'            reduce using rule 15
	'False'        reduce using rule 15
	'True'         reduce using rule 15
	'of'           reduce using rule 15
	'}'            reduce using rule 15
	'→'            reduce using rule 15
	L_integ        reduce using rule 15
	L_Var          reduce using rule 15
	%eof           reduce using rule 15


State 25

	Val -> Tag .                                        (rule 43)

	'$'            reduce using rule 43
	')'            reduce using rule 43
	'of'           reduce using rule 43
	'}'            reduce using rule 43
	'→'            reduce using rule 43
	%eof           reduce using rule 43


State 26

	SimpleVal -> Var .                                  (rule 38)

	'$'            reduce using rule 38
	')'            reduce using rule 38
	'False'        reduce using rule 38
	'True'         reduce using rule 38
	'of'           reduce using rule 38
	'}'            reduce using rule 38
	'→'            reduce using rule 38
	L_integ        reduce using rule 38
	L_Var          reduce using rule 38
	%eof           reduce using rule 38


State 27

	Val -> SimpleVal .                                  (rule 45)

	'$'            reduce using rule 45
	')'            reduce using rule 45
	'of'           reduce using rule 45
	'}'            reduce using rule 45
	'→'            reduce using rule 45
	%eof           reduce using rule 45


State 28

	LPat -> Val .                                       (rule 46)

	'→'            reduce using rule 46
	%eof           reduce using rule 46


State 29

	%start_pLPat -> LPat .                              (rule 11)

	%eof           accept


State 30

	SimpleVal -> Literal .                              (rule 37)

	'$'            reduce using rule 37
	')'            reduce using rule 37
	'False'        reduce using rule 37
	'True'         reduce using rule 37
	'of'           reduce using rule 37
	'}'            reduce using rule 37
	'→'            reduce using rule 37
	L_integ        reduce using rule 37
	L_Var          reduce using rule 37
	%eof           reduce using rule 37


State 31

	Val -> '(' . Tag ListSimpleVal ')'                  (rule 41)
	Val -> '(' . Var ListSimpleVal ')'                  (rule 42)

	L_Tag          shift, and enter state 24
	L_Var          shift, and enter state 33

	Tag            goto state 74
	Var            goto state 75

State 32

	Val -> '()' .                                       (rule 44)

	'$'            reduce using rule 44
	')'            reduce using rule 44
	'of'           reduce using rule 44
	'}'            reduce using rule 44
	'→'            reduce using rule 44
	%eof           reduce using rule 44


State 33

	Var -> L_Var .                                      (rule 16)

	'$'            reduce using rule 16
	'('            reduce using rule 16
	'()'           reduce using rule 16
	')'            reduce using rule 16
	'='            reduce using rule 16
	'False'        reduce using rule 16
	'True'         reduce using rule 16
	'of'           reduce using rule 16
	'}'            reduce using rule 16
	'→'            reduce using rule 16
	L_integ        reduce using rule 16
	L_Tag          reduce using rule 16
	L_Var          reduce using rule 16
	%eof           reduce using rule 16


State 34

	%start_pVal -> Val .                                (rule 10)

	%eof           accept


State 35

	ListSimpleVal -> SimpleVal . ListSimpleVal          (rule 40)

	'$'            reduce using rule 39
	')'            reduce using rule 39
	'False'        shift, and enter state 18
	'True'         shift, and enter state 19
	'}'            reduce using rule 39
	L_integ        shift, and enter state 15
	L_Var          shift, and enter state 33
	%eof           reduce using rule 39

	Integer        goto state 16
	Var            goto state 26
	SimpleVal      goto state 35
	ListSimpleVal  goto state 73
	Literal        goto state 30

State 36

	%start_pListSimpleVal -> ListSimpleVal .            (rule 9)

	%eof           accept


State 37

	%start_pSimpleVal -> SimpleVal .                    (rule 8)

	%eof           accept


State 38

	Exp1 -> Var . ListSimpleVal                         (rule 31)

	'$'            reduce using rule 39
	')'            reduce using rule 39
	'False'        shift, and enter state 18
	'True'         shift, and enter state 19
	'}'            reduce using rule 39
	L_integ        shift, and enter state 15
	L_Var          shift, and enter state 33
	%eof           reduce using rule 39

	Integer        goto state 16
	Var            goto state 26
	SimpleVal      goto state 35
	ListSimpleVal  goto state 72
	Literal        goto state 30

State 39

	%start_pExp1 -> Exp1 .                              (rule 7)

	%eof           accept


State 40

	Exp1 -> '(' . Exp ')'                               (rule 36)

	'('            shift, and enter state 40
	'case'         shift, and enter state 51
	'fetch'        shift, and enter state 41
	'store'        shift, and enter state 42
	'unit'         shift, and enter state 43
	'update'       shift, and enter state 44
	L_Var          shift, and enter state 33

	Var            goto state 38
	Exp            goto state 71
	Exp1           goto state 50

State 41

	Exp1 -> 'fetch' . Var                               (rule 34)

	L_Var          shift, and enter state 33

	Var            goto state 70

State 42

	Exp1 -> 'store' . Val                               (rule 33)

	'('            shift, and enter state 31
	'()'           shift, and enter state 32
	'False'        shift, and enter state 18
	'True'         shift, and enter state 19
	L_integ        shift, and enter state 15
	L_Tag          shift, and enter state 24
	L_Var          shift, and enter state 33

	Integer        goto state 16
	Tag            goto state 25
	Var            goto state 26
	SimpleVal      goto state 27
	Val            goto state 69
	Literal        goto state 30

State 43

	Exp1 -> 'unit' . Val                                (rule 32)

	'('            shift, and enter state 31
	'()'           shift, and enter state 32
	'False'        shift, and enter state 18
	'True'         shift, and enter state 19
	L_integ        shift, and enter state 15
	L_Tag          shift, and enter state 24
	L_Var          shift, and enter state 33

	Integer        goto state 16
	Tag            goto state 25
	Var            goto state 26
	SimpleVal      goto state 27
	Val            goto state 68
	Literal        goto state 30

State 44

	Exp1 -> 'update' . Var Val                          (rule 35)

	L_Var          shift, and enter state 33

	Var            goto state 67

State 45

	ListCaseExp -> CaseExp .                            (rule 29)
	ListCaseExp -> CaseExp . ';' ListCaseExp            (rule 30)

	';'            shift, and enter state 66
	'}'            reduce using rule 29
	%eof           reduce using rule 29


State 46

	%start_pListCaseExp -> ListCaseExp .                (rule 6)

	%eof           accept


State 47

	CaseExp -> CPat . '→' '{' Exp '}'                   (rule 27)

	'→'            shift, and enter state 65


State 48

	%start_pCaseExp -> CaseExp .                        (rule 5)

	%eof           accept


State 49

	%start_pExp -> Exp .                                (rule 4)

	%eof           accept


State 50

	Exp -> Exp1 . '$' 'λ' LPat '→' ';' Exp              (rule 24)
	Exp -> Exp1 .                                       (rule 26)

	'$'            shift, and enter state 64
	')'            reduce using rule 26
	'}'            reduce using rule 26
	%eof           reduce using rule 26


State 51

	Exp -> 'case' . Val 'of' '{' ListCaseExp '}'        (rule 25)

	'('            shift, and enter state 31
	'()'           shift, and enter state 32
	'False'        shift, and enter state 18
	'True'         shift, and enter state 19
	L_integ        shift, and enter state 15
	L_Tag          shift, and enter state 24
	L_Var          shift, and enter state 33

	Integer        goto state 16
	Tag            goto state 25
	Var            goto state 26
	SimpleVal      goto state 27
	Val            goto state 63
	Literal        goto state 30

State 52

	ListVar -> Var . ListVar                            (rule 23)

	')'            reduce using rule 22
	'='            reduce using rule 22
	L_Var          shift, and enter state 33
	%eof           reduce using rule 22

	Var            goto state 52
	ListVar        goto state 62

State 53

	%start_pListVar -> ListVar .                        (rule 3)

	%eof           accept


State 54

	Binding -> Var . ListVar '=' '{' Exp '}'            (rule 18)

	'='            reduce using rule 22
	L_Var          shift, and enter state 33

	Var            goto state 52
	ListVar        goto state 61

State 55

	ListBinding -> Binding .                            (rule 20)
	ListBinding -> Binding . ';' ListBinding            (rule 21)

	';'            shift, and enter state 60
	%eof           reduce using rule 20


State 56

	%start_pListBinding -> ListBinding .                (rule 2)

	%eof           accept


State 57

	%start_pBinding -> Binding .                        (rule 1)

	%eof           accept


State 58

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 59

	Program -> ListBinding .                            (rule 17)

	%eof           reduce using rule 17


State 60

	ListBinding -> Binding ';' . ListBinding            (rule 21)

	L_Var          shift, and enter state 33
	%eof           reduce using rule 19

	Var            goto state 54
	Binding        goto state 55
	ListBinding    goto state 87

State 61

	Binding -> Var ListVar . '=' '{' Exp '}'            (rule 18)

	'='            shift, and enter state 86


State 62

	ListVar -> Var ListVar .                            (rule 23)

	')'            reduce using rule 23
	'='            reduce using rule 23
	%eof           reduce using rule 23


State 63

	Exp -> 'case' Val . 'of' '{' ListCaseExp '}'        (rule 25)

	'of'           shift, and enter state 85


State 64

	Exp -> Exp1 '$' . 'λ' LPat '→' ';' Exp              (rule 24)

	'λ'            shift, and enter state 84


State 65

	CaseExp -> CPat '→' . '{' Exp '}'                   (rule 27)

	'{'            shift, and enter state 83


State 66

	ListCaseExp -> CaseExp ';' . ListCaseExp            (rule 30)

	'('            shift, and enter state 23
	'False'        shift, and enter state 18
	'True'         shift, and enter state 19
	'}'            reduce using rule 28
	L_integ        shift, and enter state 15
	L_Tag          shift, and enter state 24
	%eof           reduce using rule 28

	Integer        goto state 16
	Tag            goto state 20
	CaseExp        goto state 45
	ListCaseExp    goto state 82
	CPat           goto state 47
	Literal        goto state 22

State 67

	Exp1 -> 'update' Var . Val                          (rule 35)

	'('            shift, and enter state 31
	'()'           shift, and enter state 32
	'False'        shift, and enter state 18
	'True'         shift, and enter state 19
	L_integ        shift, and enter state 15
	L_Tag          shift, and enter state 24
	L_Var          shift, and enter state 33

	Integer        goto state 16
	Tag            goto state 25
	Var            goto state 26
	SimpleVal      goto state 27
	Val            goto state 81
	Literal        goto state 30

State 68

	Exp1 -> 'unit' Val .                                (rule 32)

	'$'            reduce using rule 32
	')'            reduce using rule 32
	'}'            reduce using rule 32
	%eof           reduce using rule 32


State 69

	Exp1 -> 'store' Val .                               (rule 33)

	'$'            reduce using rule 33
	')'            reduce using rule 33
	'}'            reduce using rule 33
	%eof           reduce using rule 33


State 70

	Exp1 -> 'fetch' Var .                               (rule 34)

	'$'            reduce using rule 34
	')'            reduce using rule 34
	'}'            reduce using rule 34
	%eof           reduce using rule 34


State 71

	Exp1 -> '(' Exp . ')'                               (rule 36)

	')'            shift, and enter state 80


State 72

	Exp1 -> Var ListSimpleVal .                         (rule 31)

	'$'            reduce using rule 31
	')'            reduce using rule 31
	'}'            reduce using rule 31
	%eof           reduce using rule 31


State 73

	ListSimpleVal -> SimpleVal ListSimpleVal .          (rule 40)

	'$'            reduce using rule 40
	')'            reduce using rule 40
	'}'            reduce using rule 40
	%eof           reduce using rule 40


State 74

	Val -> '(' Tag . ListSimpleVal ')'                  (rule 41)

	')'            reduce using rule 39
	'False'        shift, and enter state 18
	'True'         shift, and enter state 19
	L_integ        shift, and enter state 15
	L_Var          shift, and enter state 33

	Integer        goto state 16
	Var            goto state 26
	SimpleVal      goto state 35
	ListSimpleVal  goto state 79
	Literal        goto state 30

State 75

	Val -> '(' Var . ListSimpleVal ')'                  (rule 42)

	')'            reduce using rule 39
	'False'        shift, and enter state 18
	'True'         shift, and enter state 19
	L_integ        shift, and enter state 15
	L_Var          shift, and enter state 33

	Integer        goto state 16
	Var            goto state 26
	SimpleVal      goto state 35
	ListSimpleVal  goto state 78
	Literal        goto state 30

State 76

	CPat -> '(' Tag . ListVar ')'                       (rule 47)

	')'            reduce using rule 22
	L_Var          shift, and enter state 33

	Var            goto state 52
	ListVar        goto state 77

State 77

	CPat -> '(' Tag ListVar . ')'                       (rule 47)

	')'            shift, and enter state 94


State 78

	Val -> '(' Var ListSimpleVal . ')'                  (rule 42)

	')'            shift, and enter state 93


State 79

	Val -> '(' Tag ListSimpleVal . ')'                  (rule 41)

	')'            shift, and enter state 92


State 80

	Exp1 -> '(' Exp ')' .                               (rule 36)

	'$'            reduce using rule 36
	')'            reduce using rule 36
	'}'            reduce using rule 36
	%eof           reduce using rule 36


State 81

	Exp1 -> 'update' Var Val .                          (rule 35)

	'$'            reduce using rule 35
	')'            reduce using rule 35
	'}'            reduce using rule 35
	%eof           reduce using rule 35


State 82

	ListCaseExp -> CaseExp ';' ListCaseExp .            (rule 30)

	'}'            reduce using rule 30
	%eof           reduce using rule 30


State 83

	CaseExp -> CPat '→' '{' . Exp '}'                   (rule 27)

	'('            shift, and enter state 40
	'case'         shift, and enter state 51
	'fetch'        shift, and enter state 41
	'store'        shift, and enter state 42
	'unit'         shift, and enter state 43
	'update'       shift, and enter state 44
	L_Var          shift, and enter state 33

	Var            goto state 38
	Exp            goto state 91
	Exp1           goto state 50

State 84

	Exp -> Exp1 '$' 'λ' . LPat '→' ';' Exp              (rule 24)

	'('            shift, and enter state 31
	'()'           shift, and enter state 32
	'False'        shift, and enter state 18
	'True'         shift, and enter state 19
	L_integ        shift, and enter state 15
	L_Tag          shift, and enter state 24
	L_Var          shift, and enter state 33

	Integer        goto state 16
	Tag            goto state 25
	Var            goto state 26
	SimpleVal      goto state 27
	Val            goto state 28
	LPat           goto state 90
	Literal        goto state 30

State 85

	Exp -> 'case' Val 'of' . '{' ListCaseExp '}'        (rule 25)

	'{'            shift, and enter state 89


State 86

	Binding -> Var ListVar '=' . '{' Exp '}'            (rule 18)

	'{'            shift, and enter state 88


State 87

	ListBinding -> Binding ';' ListBinding .            (rule 21)

	%eof           reduce using rule 21


State 88

	Binding -> Var ListVar '=' '{' . Exp '}'            (rule 18)

	'('            shift, and enter state 40
	'case'         shift, and enter state 51
	'fetch'        shift, and enter state 41
	'store'        shift, and enter state 42
	'unit'         shift, and enter state 43
	'update'       shift, and enter state 44
	L_Var          shift, and enter state 33

	Var            goto state 38
	Exp            goto state 98
	Exp1           goto state 50

State 89

	Exp -> 'case' Val 'of' '{' . ListCaseExp '}'        (rule 25)

	'('            shift, and enter state 23
	'False'        shift, and enter state 18
	'True'         shift, and enter state 19
	'}'            reduce using rule 28
	L_integ        shift, and enter state 15
	L_Tag          shift, and enter state 24

	Integer        goto state 16
	Tag            goto state 20
	CaseExp        goto state 45
	ListCaseExp    goto state 97
	CPat           goto state 47
	Literal        goto state 22

State 90

	Exp -> Exp1 '$' 'λ' LPat . '→' ';' Exp              (rule 24)

	'→'            shift, and enter state 96


State 91

	CaseExp -> CPat '→' '{' Exp . '}'                   (rule 27)

	'}'            shift, and enter state 95


State 92

	Val -> '(' Tag ListSimpleVal ')' .                  (rule 41)

	'$'            reduce using rule 41
	')'            reduce using rule 41
	'of'           reduce using rule 41
	'}'            reduce using rule 41
	'→'            reduce using rule 41
	%eof           reduce using rule 41


State 93

	Val -> '(' Var ListSimpleVal ')' .                  (rule 42)

	'$'            reduce using rule 42
	')'            reduce using rule 42
	'of'           reduce using rule 42
	'}'            reduce using rule 42
	'→'            reduce using rule 42
	%eof           reduce using rule 42


State 94

	CPat -> '(' Tag ListVar ')' .                       (rule 47)

	'→'            reduce using rule 47
	%eof           reduce using rule 47


State 95

	CaseExp -> CPat '→' '{' Exp '}' .                   (rule 27)

	';'            reduce using rule 27
	'}'            reduce using rule 27
	%eof           reduce using rule 27


State 96

	Exp -> Exp1 '$' 'λ' LPat '→' . ';' Exp              (rule 24)

	';'            shift, and enter state 101


State 97

	Exp -> 'case' Val 'of' '{' ListCaseExp . '}'        (rule 25)

	'}'            shift, and enter state 100


State 98

	Binding -> Var ListVar '=' '{' Exp . '}'            (rule 18)

	'}'            shift, and enter state 99


State 99

	Binding -> Var ListVar '=' '{' Exp '}' .            (rule 18)

	';'            reduce using rule 18
	%eof           reduce using rule 18


State 100

	Exp -> 'case' Val 'of' '{' ListCaseExp '}' .        (rule 25)

	')'            reduce using rule 25
	'}'            reduce using rule 25
	%eof           reduce using rule 25


State 101

	Exp -> Exp1 '$' 'λ' LPat '→' ';' . Exp              (rule 24)

	'('            shift, and enter state 40
	'case'         shift, and enter state 51
	'fetch'        shift, and enter state 41
	'store'        shift, and enter state 42
	'unit'         shift, and enter state 43
	'update'       shift, and enter state 44
	L_Var          shift, and enter state 33

	Var            goto state 38
	Exp            goto state 102
	Exp1           goto state 50

State 102

	Exp -> Exp1 '$' 'λ' LPat '→' ';' Exp .              (rule 24)

	')'            reduce using rule 24
	'}'            reduce using rule 24
	%eof           reduce using rule 24


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 53
Number of terminals: 21
Number of non-terminals: 31
Number of states: 103
