-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language GRIN.

module Syntax.GRIN.Abs where

import Prelude (Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Program = Program [Binding]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Binding = Binding Var [Var] Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Exp
    = Sequencing Exp LPat Exp
    | Case Val [CaseExp]
    | App Var [SimpleVal]
    | Unit Val
    | Store Val
    | Fetch Var
    | Update Var Val
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data CaseExp = CaseExp CPat Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data SimpleVal = SimpleLiteral Literal | SimpleVar Var
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Val
    = ConstantTag Tag [SimpleVal]
    | VariableTag Var [SimpleVal]
    | SingleTag Tag
    | Empty
    | SimpleVal SimpleVal
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LPat = LPat Val
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data CPat
    = ConstNodePattern Tag [Var]
    | ConstTagPattern Tag
    | ConstLiteral Literal
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Literal = LitInteger Integer | LitBoolFalse | LitBoolTrue
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Tag = Tag String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype Var = Var String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

