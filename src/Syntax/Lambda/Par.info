-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Syntax/Lambda/Par.y
-----------------------------------------------------------------------------

state 35 contains 6 reduce/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pListVar -> ListVar                         (0)
	%start_pProgram -> Program                         (1)
	%start_pBinding -> Binding                         (2)
	%start_pListBinding -> ListBinding                 (3)
	%start_pExp -> Exp                                 (4)
	%start_pExp1 -> Exp1                               (5)
	%start_pExp2 -> Exp2                               (6)
	%start_pCaseExp -> CaseExp                         (7)
	%start_pListCaseExp -> ListCaseExp                 (8)
	%start_pAtom -> Atom                               (9)
	%start_pListAtom -> ListAtom                       (10)
	%start_pLiteral -> Literal                         (11)
	%start_pPat -> Pat                                 (12)
	Integer -> L_integ                                 (13)
	Con -> L_Con                                       (14)
	Var -> L_Var                                       (15)
	ListVar ->                                         (16)
	ListVar -> Var ListVar                             (17)
	Program -> ListBinding                             (18)
	Binding -> Var ListVar '=' Exp                     (19)
	ListBinding ->                                     (20)
	ListBinding -> Binding                             (21)
	ListBinding -> Binding ';' ListBinding             (22)
	Exp -> 'case' Exp1 'of' '{' ListCaseExp '}'        (23)
	Exp -> 'let' Var '=' Exp1 'in' Exp                 (24)
	Exp -> 'letS' Var '=' Exp1 'in' Exp                (25)
	Exp -> Exp1                                        (26)
	Exp1 -> Con ListAtom                               (27)
	Exp1 -> Var ListAtom                               (28)
	Exp1 -> Exp2                                       (29)
	Exp2 -> Atom                                       (30)
	Exp2 -> '(' Exp ')'                                (31)
	CaseExp -> Pat '->' Exp                            (32)
	ListCaseExp ->                                     (33)
	ListCaseExp -> CaseExp                             (34)
	ListCaseExp -> CaseExp ';' ListCaseExp             (35)
	Atom -> Var                                        (36)
	Atom -> Literal                                    (37)
	ListAtom ->                                        (38)
	ListAtom -> Atom ListAtom                          (39)
	Literal -> Integer                                 (40)
	Pat -> Con ListVar                                 (41)
	Pat -> Literal                                     (42)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'->'           { PT _ (TS _ 3) }
	';'            { PT _ (TS _ 4) }
	'='            { PT _ (TS _ 5) }
	'case'         { PT _ (TS _ 6) }
	'in'           { PT _ (TS _ 7) }
	'let'          { PT _ (TS _ 8) }
	'letS'         { PT _ (TS _ 9) }
	'of'           { PT _ (TS _ 10) }
	'{'            { PT _ (TS _ 11) }
	'}'            { PT _ (TS _ 12) }
	L_integ        { PT _ (TI $$) }
	L_Con          { PT _ (T_Con $$) }
	L_Var          { PT _ (T_Var $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pListVar rule  0
	%start_pProgram rule  1
	%start_pBinding rule  2
	%start_pListBinding rule  3
	%start_pExp     rule  4
	%start_pExp1    rule  5
	%start_pExp2    rule  6
	%start_pCaseExp rule  7
	%start_pListCaseExp rule  8
	%start_pAtom    rule  9
	%start_pListAtom rule  10
	%start_pLiteral rule  11
	%start_pPat     rule  12
	Integer         rule  13
	Con             rule  14
	Var             rule  15
	ListVar         rules 16, 17
	Program         rule  18
	Binding         rule  19
	ListBinding     rules 20, 21, 22
	Exp             rules 23, 24, 25, 26
	Exp1            rules 27, 28, 29
	Exp2            rules 30, 31
	CaseExp         rule  32
	ListCaseExp     rules 33, 34, 35
	Atom            rules 36, 37
	ListAtom        rules 38, 39
	Literal         rule  40
	Pat             rules 41, 42

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pListVar -> . ListVar                        (rule 0)

	L_Var          shift, and enter state 25
	%eof           reduce using rule 16

	Var            goto state 49
	ListVar        goto state 50

State 1

	%start_pProgram -> . Program                        (rule 1)

	L_Var          shift, and enter state 25
	%eof           reduce using rule 20

	Var            goto state 43
	Program        goto state 47
	Binding        goto state 44
	ListBinding    goto state 48

State 2

	%start_pBinding -> . Binding                        (rule 2)

	L_Var          shift, and enter state 25

	Var            goto state 43
	Binding        goto state 46

State 3

	%start_pListBinding -> . ListBinding                (rule 3)

	L_Var          shift, and enter state 25
	%eof           reduce using rule 20

	Var            goto state 43
	Binding        goto state 44
	ListBinding    goto state 45

State 4

	%start_pExp -> . Exp                                (rule 4)

	'('            shift, and enter state 33
	'case'         shift, and enter state 40
	'let'          shift, and enter state 41
	'letS'         shift, and enter state 42
	L_integ        shift, and enter state 14
	L_Con          shift, and enter state 19
	L_Var          shift, and enter state 25

	Integer        goto state 15
	Con            goto state 34
	Var            goto state 35
	Exp            goto state 38
	Exp1           goto state 39
	Exp2           goto state 37
	Atom           goto state 32
	Literal        goto state 24

State 5

	%start_pExp1 -> . Exp1                              (rule 5)

	'('            shift, and enter state 33
	L_integ        shift, and enter state 14
	L_Con          shift, and enter state 19
	L_Var          shift, and enter state 25

	Integer        goto state 15
	Con            goto state 34
	Var            goto state 35
	Exp1           goto state 36
	Exp2           goto state 37
	Atom           goto state 32
	Literal        goto state 24

State 6

	%start_pExp2 -> . Exp2                              (rule 6)

	'('            shift, and enter state 33
	L_integ        shift, and enter state 14
	L_Var          shift, and enter state 25

	Integer        goto state 15
	Var            goto state 21
	Exp2           goto state 31
	Atom           goto state 32
	Literal        goto state 24

State 7

	%start_pCaseExp -> . CaseExp                        (rule 7)

	L_integ        shift, and enter state 14
	L_Con          shift, and enter state 19

	Integer        goto state 15
	Con            goto state 16
	CaseExp        goto state 30
	Literal        goto state 17
	Pat            goto state 29

State 8

	%start_pListCaseExp -> . ListCaseExp                (rule 8)

	L_integ        shift, and enter state 14
	L_Con          shift, and enter state 19
	%eof           reduce using rule 33

	Integer        goto state 15
	Con            goto state 16
	CaseExp        goto state 27
	ListCaseExp    goto state 28
	Literal        goto state 17
	Pat            goto state 29

State 9

	%start_pAtom -> . Atom                              (rule 9)

	L_integ        shift, and enter state 14
	L_Var          shift, and enter state 25

	Integer        goto state 15
	Var            goto state 21
	Atom           goto state 26
	Literal        goto state 24

State 10

	%start_pListAtom -> . ListAtom                      (rule 10)

	L_integ        shift, and enter state 14
	L_Var          shift, and enter state 25
	%eof           reduce using rule 38

	Integer        goto state 15
	Var            goto state 21
	Atom           goto state 22
	ListAtom       goto state 23
	Literal        goto state 24

State 11

	%start_pLiteral -> . Literal                        (rule 11)

	L_integ        shift, and enter state 14

	Integer        goto state 15
	Literal        goto state 20

State 12

	%start_pPat -> . Pat                                (rule 12)

	L_integ        shift, and enter state 14
	L_Con          shift, and enter state 19

	Integer        goto state 15
	Con            goto state 16
	Literal        goto state 17
	Pat            goto state 18

State 13

	Integer -> . L_integ                                (rule 13)

	L_integ        shift, and enter state 14


State 14

	Integer -> L_integ .                                (rule 13)

	')'            reduce using rule 13
	'->'           reduce using rule 13
	';'            reduce using rule 13
	'in'           reduce using rule 13
	'of'           reduce using rule 13
	'}'            reduce using rule 13
	L_integ        reduce using rule 13
	L_Var          reduce using rule 13
	%eof           reduce using rule 13


State 15

	Literal -> Integer .                                (rule 40)

	')'            reduce using rule 40
	'->'           reduce using rule 40
	';'            reduce using rule 40
	'in'           reduce using rule 40
	'of'           reduce using rule 40
	'}'            reduce using rule 40
	L_integ        reduce using rule 40
	L_Var          reduce using rule 40
	%eof           reduce using rule 40


State 16

	Pat -> Con . ListVar                                (rule 41)

	'->'           reduce using rule 16
	L_Var          shift, and enter state 25
	%eof           reduce using rule 16

	Var            goto state 49
	ListVar        goto state 63

State 17

	Pat -> Literal .                                    (rule 42)

	'->'           reduce using rule 42
	%eof           reduce using rule 42


State 18

	%start_pPat -> Pat .                                (rule 12)

	%eof           accept


State 19

	Con -> L_Con .                                      (rule 14)

	')'            reduce using rule 14
	'->'           reduce using rule 14
	';'            reduce using rule 14
	'in'           reduce using rule 14
	'of'           reduce using rule 14
	'}'            reduce using rule 14
	L_integ        reduce using rule 14
	L_Var          reduce using rule 14
	%eof           reduce using rule 14


State 20

	%start_pLiteral -> Literal .                        (rule 11)

	%eof           accept


State 21

	Atom -> Var .                                       (rule 36)

	')'            reduce using rule 36
	';'            reduce using rule 36
	'in'           reduce using rule 36
	'of'           reduce using rule 36
	'}'            reduce using rule 36
	L_integ        reduce using rule 36
	L_Var          reduce using rule 36
	%eof           reduce using rule 36


State 22

	ListAtom -> Atom . ListAtom                         (rule 39)

	')'            reduce using rule 38
	';'            reduce using rule 38
	'in'           reduce using rule 38
	'of'           reduce using rule 38
	'}'            reduce using rule 38
	L_integ        shift, and enter state 14
	L_Var          shift, and enter state 25
	%eof           reduce using rule 38

	Integer        goto state 15
	Var            goto state 21
	Atom           goto state 22
	ListAtom       goto state 62
	Literal        goto state 24

State 23

	%start_pListAtom -> ListAtom .                      (rule 10)

	%eof           accept


State 24

	Atom -> Literal .                                   (rule 37)

	')'            reduce using rule 37
	';'            reduce using rule 37
	'in'           reduce using rule 37
	'of'           reduce using rule 37
	'}'            reduce using rule 37
	L_integ        reduce using rule 37
	L_Var          reduce using rule 37
	%eof           reduce using rule 37


State 25

	Var -> L_Var .                                      (rule 15)

	')'            reduce using rule 15
	'->'           reduce using rule 15
	';'            reduce using rule 15
	'='            reduce using rule 15
	'in'           reduce using rule 15
	'of'           reduce using rule 15
	'}'            reduce using rule 15
	L_integ        reduce using rule 15
	L_Var          reduce using rule 15
	%eof           reduce using rule 15


State 26

	%start_pAtom -> Atom .                              (rule 9)

	%eof           accept


State 27

	ListCaseExp -> CaseExp .                            (rule 34)
	ListCaseExp -> CaseExp . ';' ListCaseExp            (rule 35)

	';'            shift, and enter state 61
	'}'            reduce using rule 34
	%eof           reduce using rule 34


State 28

	%start_pListCaseExp -> ListCaseExp .                (rule 8)

	%eof           accept


State 29

	CaseExp -> Pat . '->' Exp                           (rule 32)

	'->'           shift, and enter state 60


State 30

	%start_pCaseExp -> CaseExp .                        (rule 7)

	%eof           accept


State 31

	%start_pExp2 -> Exp2 .                              (rule 6)

	%eof           accept


State 32

	Exp2 -> Atom .                                      (rule 30)

	')'            reduce using rule 30
	';'            reduce using rule 30
	'in'           reduce using rule 30
	'of'           reduce using rule 30
	'}'            reduce using rule 30
	%eof           reduce using rule 30


State 33

	Exp2 -> '(' . Exp ')'                               (rule 31)

	'('            shift, and enter state 33
	'case'         shift, and enter state 40
	'let'          shift, and enter state 41
	'letS'         shift, and enter state 42
	L_integ        shift, and enter state 14
	L_Con          shift, and enter state 19
	L_Var          shift, and enter state 25

	Integer        goto state 15
	Con            goto state 34
	Var            goto state 35
	Exp            goto state 59
	Exp1           goto state 39
	Exp2           goto state 37
	Atom           goto state 32
	Literal        goto state 24

State 34

	Exp1 -> Con . ListAtom                              (rule 27)

	')'            reduce using rule 38
	';'            reduce using rule 38
	'in'           reduce using rule 38
	'of'           reduce using rule 38
	'}'            reduce using rule 38
	L_integ        shift, and enter state 14
	L_Var          shift, and enter state 25
	%eof           reduce using rule 38

	Integer        goto state 15
	Var            goto state 21
	Atom           goto state 22
	ListAtom       goto state 58
	Literal        goto state 24

State 35

	Exp1 -> Var . ListAtom                              (rule 28)
	Atom -> Var .                                       (rule 36)

	')'            reduce using rule 38
			(reduce using rule 36)

	';'            reduce using rule 38
			(reduce using rule 36)

	'in'           reduce using rule 38
			(reduce using rule 36)

	'of'           reduce using rule 38
			(reduce using rule 36)

	'}'            reduce using rule 38
			(reduce using rule 36)

	L_integ        shift, and enter state 14
	L_Var          shift, and enter state 25
	%eof           reduce using rule 38
			(reduce using rule 36)


	Integer        goto state 15
	Var            goto state 21
	Atom           goto state 22
	ListAtom       goto state 57
	Literal        goto state 24

State 36

	%start_pExp1 -> Exp1 .                              (rule 5)

	%eof           accept


State 37

	Exp1 -> Exp2 .                                      (rule 29)

	')'            reduce using rule 29
	';'            reduce using rule 29
	'in'           reduce using rule 29
	'of'           reduce using rule 29
	'}'            reduce using rule 29
	%eof           reduce using rule 29


State 38

	%start_pExp -> Exp .                                (rule 4)

	%eof           accept


State 39

	Exp -> Exp1 .                                       (rule 26)

	')'            reduce using rule 26
	';'            reduce using rule 26
	'}'            reduce using rule 26
	%eof           reduce using rule 26


State 40

	Exp -> 'case' . Exp1 'of' '{' ListCaseExp '}'       (rule 23)

	'('            shift, and enter state 33
	L_integ        shift, and enter state 14
	L_Con          shift, and enter state 19
	L_Var          shift, and enter state 25

	Integer        goto state 15
	Con            goto state 34
	Var            goto state 35
	Exp1           goto state 56
	Exp2           goto state 37
	Atom           goto state 32
	Literal        goto state 24

State 41

	Exp -> 'let' . Var '=' Exp1 'in' Exp                (rule 24)

	L_Var          shift, and enter state 25

	Var            goto state 55

State 42

	Exp -> 'letS' . Var '=' Exp1 'in' Exp               (rule 25)

	L_Var          shift, and enter state 25

	Var            goto state 54

State 43

	Binding -> Var . ListVar '=' Exp                    (rule 19)

	'='            reduce using rule 16
	L_Var          shift, and enter state 25

	Var            goto state 49
	ListVar        goto state 53

State 44

	ListBinding -> Binding .                            (rule 21)
	ListBinding -> Binding . ';' ListBinding            (rule 22)

	';'            shift, and enter state 52
	%eof           reduce using rule 21


State 45

	%start_pListBinding -> ListBinding .                (rule 3)

	%eof           accept


State 46

	%start_pBinding -> Binding .                        (rule 2)

	%eof           accept


State 47

	%start_pProgram -> Program .                        (rule 1)

	%eof           accept


State 48

	Program -> ListBinding .                            (rule 18)

	%eof           reduce using rule 18


State 49

	ListVar -> Var . ListVar                            (rule 17)

	'->'           reduce using rule 16
	'='            reduce using rule 16
	L_Var          shift, and enter state 25
	%eof           reduce using rule 16

	Var            goto state 49
	ListVar        goto state 51

State 50

	%start_pListVar -> ListVar .                        (rule 0)

	%eof           accept


State 51

	ListVar -> Var ListVar .                            (rule 17)

	'->'           reduce using rule 17
	'='            reduce using rule 17
	%eof           reduce using rule 17


State 52

	ListBinding -> Binding ';' . ListBinding            (rule 22)

	L_Var          shift, and enter state 25
	%eof           reduce using rule 20

	Var            goto state 43
	Binding        goto state 44
	ListBinding    goto state 71

State 53

	Binding -> Var ListVar . '=' Exp                    (rule 19)

	'='            shift, and enter state 70


State 54

	Exp -> 'letS' Var . '=' Exp1 'in' Exp               (rule 25)

	'='            shift, and enter state 69


State 55

	Exp -> 'let' Var . '=' Exp1 'in' Exp                (rule 24)

	'='            shift, and enter state 68


State 56

	Exp -> 'case' Exp1 . 'of' '{' ListCaseExp '}'       (rule 23)

	'of'           shift, and enter state 67


State 57

	Exp1 -> Var ListAtom .                              (rule 28)

	')'            reduce using rule 28
	';'            reduce using rule 28
	'in'           reduce using rule 28
	'of'           reduce using rule 28
	'}'            reduce using rule 28
	%eof           reduce using rule 28


State 58

	Exp1 -> Con ListAtom .                              (rule 27)

	')'            reduce using rule 27
	';'            reduce using rule 27
	'in'           reduce using rule 27
	'of'           reduce using rule 27
	'}'            reduce using rule 27
	%eof           reduce using rule 27


State 59

	Exp2 -> '(' Exp . ')'                               (rule 31)

	')'            shift, and enter state 66


State 60

	CaseExp -> Pat '->' . Exp                           (rule 32)

	'('            shift, and enter state 33
	'case'         shift, and enter state 40
	'let'          shift, and enter state 41
	'letS'         shift, and enter state 42
	L_integ        shift, and enter state 14
	L_Con          shift, and enter state 19
	L_Var          shift, and enter state 25

	Integer        goto state 15
	Con            goto state 34
	Var            goto state 35
	Exp            goto state 65
	Exp1           goto state 39
	Exp2           goto state 37
	Atom           goto state 32
	Literal        goto state 24

State 61

	ListCaseExp -> CaseExp ';' . ListCaseExp            (rule 35)

	'}'            reduce using rule 33
	L_integ        shift, and enter state 14
	L_Con          shift, and enter state 19
	%eof           reduce using rule 33

	Integer        goto state 15
	Con            goto state 16
	CaseExp        goto state 27
	ListCaseExp    goto state 64
	Literal        goto state 17
	Pat            goto state 29

State 62

	ListAtom -> Atom ListAtom .                         (rule 39)

	')'            reduce using rule 39
	';'            reduce using rule 39
	'in'           reduce using rule 39
	'of'           reduce using rule 39
	'}'            reduce using rule 39
	%eof           reduce using rule 39


State 63

	Pat -> Con ListVar .                                (rule 41)

	'->'           reduce using rule 41
	%eof           reduce using rule 41


State 64

	ListCaseExp -> CaseExp ';' ListCaseExp .            (rule 35)

	'}'            reduce using rule 35
	%eof           reduce using rule 35


State 65

	CaseExp -> Pat '->' Exp .                           (rule 32)

	';'            reduce using rule 32
	'}'            reduce using rule 32
	%eof           reduce using rule 32


State 66

	Exp2 -> '(' Exp ')' .                               (rule 31)

	')'            reduce using rule 31
	';'            reduce using rule 31
	'in'           reduce using rule 31
	'of'           reduce using rule 31
	'}'            reduce using rule 31
	%eof           reduce using rule 31


State 67

	Exp -> 'case' Exp1 'of' . '{' ListCaseExp '}'       (rule 23)

	'{'            shift, and enter state 75


State 68

	Exp -> 'let' Var '=' . Exp1 'in' Exp                (rule 24)

	'('            shift, and enter state 33
	L_integ        shift, and enter state 14
	L_Con          shift, and enter state 19
	L_Var          shift, and enter state 25

	Integer        goto state 15
	Con            goto state 34
	Var            goto state 35
	Exp1           goto state 74
	Exp2           goto state 37
	Atom           goto state 32
	Literal        goto state 24

State 69

	Exp -> 'letS' Var '=' . Exp1 'in' Exp               (rule 25)

	'('            shift, and enter state 33
	L_integ        shift, and enter state 14
	L_Con          shift, and enter state 19
	L_Var          shift, and enter state 25

	Integer        goto state 15
	Con            goto state 34
	Var            goto state 35
	Exp1           goto state 73
	Exp2           goto state 37
	Atom           goto state 32
	Literal        goto state 24

State 70

	Binding -> Var ListVar '=' . Exp                    (rule 19)

	'('            shift, and enter state 33
	'case'         shift, and enter state 40
	'let'          shift, and enter state 41
	'letS'         shift, and enter state 42
	L_integ        shift, and enter state 14
	L_Con          shift, and enter state 19
	L_Var          shift, and enter state 25

	Integer        goto state 15
	Con            goto state 34
	Var            goto state 35
	Exp            goto state 72
	Exp1           goto state 39
	Exp2           goto state 37
	Atom           goto state 32
	Literal        goto state 24

State 71

	ListBinding -> Binding ';' ListBinding .            (rule 22)

	%eof           reduce using rule 22


State 72

	Binding -> Var ListVar '=' Exp .                    (rule 19)

	';'            reduce using rule 19
	%eof           reduce using rule 19


State 73

	Exp -> 'letS' Var '=' Exp1 . 'in' Exp               (rule 25)

	'in'           shift, and enter state 78


State 74

	Exp -> 'let' Var '=' Exp1 . 'in' Exp                (rule 24)

	'in'           shift, and enter state 77


State 75

	Exp -> 'case' Exp1 'of' '{' . ListCaseExp '}'       (rule 23)

	'}'            reduce using rule 33
	L_integ        shift, and enter state 14
	L_Con          shift, and enter state 19

	Integer        goto state 15
	Con            goto state 16
	CaseExp        goto state 27
	ListCaseExp    goto state 76
	Literal        goto state 17
	Pat            goto state 29

State 76

	Exp -> 'case' Exp1 'of' '{' ListCaseExp . '}'       (rule 23)

	'}'            shift, and enter state 81


State 77

	Exp -> 'let' Var '=' Exp1 'in' . Exp                (rule 24)

	'('            shift, and enter state 33
	'case'         shift, and enter state 40
	'let'          shift, and enter state 41
	'letS'         shift, and enter state 42
	L_integ        shift, and enter state 14
	L_Con          shift, and enter state 19
	L_Var          shift, and enter state 25

	Integer        goto state 15
	Con            goto state 34
	Var            goto state 35
	Exp            goto state 80
	Exp1           goto state 39
	Exp2           goto state 37
	Atom           goto state 32
	Literal        goto state 24

State 78

	Exp -> 'letS' Var '=' Exp1 'in' . Exp               (rule 25)

	'('            shift, and enter state 33
	'case'         shift, and enter state 40
	'let'          shift, and enter state 41
	'letS'         shift, and enter state 42
	L_integ        shift, and enter state 14
	L_Con          shift, and enter state 19
	L_Var          shift, and enter state 25

	Integer        goto state 15
	Con            goto state 34
	Var            goto state 35
	Exp            goto state 79
	Exp1           goto state 39
	Exp2           goto state 37
	Atom           goto state 32
	Literal        goto state 24

State 79

	Exp -> 'letS' Var '=' Exp1 'in' Exp .               (rule 25)

	')'            reduce using rule 25
	';'            reduce using rule 25
	'}'            reduce using rule 25
	%eof           reduce using rule 25


State 80

	Exp -> 'let' Var '=' Exp1 'in' Exp .                (rule 24)

	')'            reduce using rule 24
	';'            reduce using rule 24
	'}'            reduce using rule 24
	%eof           reduce using rule 24


State 81

	Exp -> 'case' Exp1 'of' '{' ListCaseExp '}' .       (rule 23)

	')'            reduce using rule 23
	';'            reduce using rule 23
	'}'            reduce using rule 23
	%eof           reduce using rule 23


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 43
Number of terminals: 15
Number of non-terminals: 29
Number of states: 82
