-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Syntax.Lambda.Par
  ( happyError
  , myLexer
  , pListVar
  , pProgram
  , pBinding
  , pListBinding
  , pExp
  , pExp1
  , pExp2
  , pCaseExp
  , pListCaseExp
  , pAtom
  , pListAtom
  , pLiteral
  , pPat
  ) where

import Prelude

import qualified Syntax.Lambda.Abs
import Syntax.Lambda.Lex

}

%name pListVar ListVar
%name pProgram Program
%name pBinding Binding
%name pListBinding ListBinding
%name pExp Exp
%name pExp1 Exp1
%name pExp2 Exp2
%name pCaseExp CaseExp
%name pListCaseExp ListCaseExp
%name pAtom Atom
%name pListAtom ListAtom
%name pLiteral Literal
%name pPat Pat
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '->' { PT _ (TS _ 3) }
  ';' { PT _ (TS _ 4) }
  '=' { PT _ (TS _ 5) }
  'case' { PT _ (TS _ 6) }
  'in' { PT _ (TS _ 7) }
  'let' { PT _ (TS _ 8) }
  'letS' { PT _ (TS _ 9) }
  'of' { PT _ (TS _ 10) }
  '{' { PT _ (TS _ 11) }
  '}' { PT _ (TS _ 12) }
  L_integ  { PT _ (TI $$) }
  L_Con { PT _ (T_Con $$) }
  L_Var { PT _ (T_Var $$) }

%%

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

Con :: { Syntax.Lambda.Abs.Con }
Con  : L_Con { Syntax.Lambda.Abs.Con $1 }

Var :: { Syntax.Lambda.Abs.Var }
Var  : L_Var { Syntax.Lambda.Abs.Var $1 }

ListVar :: { [Syntax.Lambda.Abs.Var] }
ListVar : {- empty -} { [] } | Var ListVar { (:) $1 $2 }

Program :: { Syntax.Lambda.Abs.Program }
Program : ListBinding { Syntax.Lambda.Abs.Program $1 }

Binding :: { Syntax.Lambda.Abs.Binding }
Binding : Var ListVar '=' Exp { Syntax.Lambda.Abs.Binding $1 $2 $4 }

ListBinding :: { [Syntax.Lambda.Abs.Binding] }
ListBinding : {- empty -} { [] }
            | Binding { (:[]) $1 }
            | Binding ';' ListBinding { (:) $1 $3 }

Exp :: { Syntax.Lambda.Abs.Exp }
Exp : 'case' Exp1 'of' '{' ListCaseExp '}' { Syntax.Lambda.Abs.Case $2 $5 }
    | 'let' Var '=' Exp1 'in' Exp { Syntax.Lambda.Abs.Let $2 $4 $6 }
    | 'letS' Var '=' Exp1 'in' Exp { Syntax.Lambda.Abs.LetS $2 $4 $6 }
    | Exp1 { $1 }

Exp1 :: { Syntax.Lambda.Abs.Exp }
Exp1 : Con ListAtom { Syntax.Lambda.Abs.Constructor $1 $2 }
     | Var ListAtom { Syntax.Lambda.Abs.App $1 $2 }
     | Exp2 { $1 }

Exp2 :: { Syntax.Lambda.Abs.Exp }
Exp2 : Atom { Syntax.Lambda.Abs.Atom $1 } | '(' Exp ')' { $2 }

CaseExp :: { Syntax.Lambda.Abs.CaseExp }
CaseExp : Pat '->' Exp { Syntax.Lambda.Abs.CaseExp $1 $3 }

ListCaseExp :: { [Syntax.Lambda.Abs.CaseExp] }
ListCaseExp : {- empty -} { [] }
            | CaseExp { (:[]) $1 }
            | CaseExp ';' ListCaseExp { (:) $1 $3 }

Atom :: { Syntax.Lambda.Abs.Atom }
Atom : Var { Syntax.Lambda.Abs.AtomVar $1 }
     | Literal { Syntax.Lambda.Abs.AtomLiteral $1 }

ListAtom :: { [Syntax.Lambda.Abs.Atom] }
ListAtom : {- empty -} { [] } | Atom ListAtom { (:) $1 $2 }

Literal :: { Syntax.Lambda.Abs.Literal }
Literal : Integer { Syntax.Lambda.Abs.LitInteger $1 }

Pat :: { Syntax.Lambda.Abs.Pat }
Pat : Con ListVar { Syntax.Lambda.Abs.ConPat $1 $2 }
    | Literal { Syntax.Lambda.Abs.LitPat $1 }
{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

