-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language Fun.

module Syntax.Fun.Abs where

import Prelude (Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Program = Program [Binding]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Binding = Binding Var [Var] Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Exp
    = Case Exp [CaseExp]
    | Let Var Exp Exp
    | LetS Var Exp Exp
    | Constructor Con [Exp]
    | App Exp Exp [Exp]
    | Atom Atom
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data CaseExp = CaseExp Pat Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Atom = AtomVar Var | AtomLiteral Literal
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Literal = LitInteger Integer
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Pat = ConPat Con [Var] | LitPat Literal
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Con = Con String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype Var = Var String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

