-- Haskell module generated by the BNF converter

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Syntax.Fun.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Syntax.Fun.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transCon :: Syntax.Fun.Abs.Con -> Result
transCon x = case x of
  Syntax.Fun.Abs.Con string -> failure x

transVar :: Syntax.Fun.Abs.Var -> Result
transVar x = case x of
  Syntax.Fun.Abs.Var string -> failure x

transProgram :: Syntax.Fun.Abs.Program -> Result
transProgram x = case x of
  Syntax.Fun.Abs.Program bindings -> failure x

transBinding :: Syntax.Fun.Abs.Binding -> Result
transBinding x = case x of
  Syntax.Fun.Abs.Binding var vars exp -> failure x

transExp :: Syntax.Fun.Abs.Exp -> Result
transExp x = case x of
  Syntax.Fun.Abs.Case exp caseexps -> failure x
  Syntax.Fun.Abs.Let var exp1 exp2 -> failure x
  Syntax.Fun.Abs.LetS var exp1 exp2 -> failure x
  Syntax.Fun.Abs.Constructor con exps -> failure x
  Syntax.Fun.Abs.App exp1 exp2 exps -> failure x
  Syntax.Fun.Abs.Atom atom -> failure x

transCaseExp :: Syntax.Fun.Abs.CaseExp -> Result
transCaseExp x = case x of
  Syntax.Fun.Abs.CaseExp pat exp -> failure x

transAtom :: Syntax.Fun.Abs.Atom -> Result
transAtom x = case x of
  Syntax.Fun.Abs.AtomVar var -> failure x
  Syntax.Fun.Abs.AtomLiteral literal -> failure x

transLiteral :: Syntax.Fun.Abs.Literal -> Result
transLiteral x = case x of
  Syntax.Fun.Abs.LitInteger integer -> failure x

transPat :: Syntax.Fun.Abs.Pat -> Result
transPat x = case x of
  Syntax.Fun.Abs.ConPat con vars -> failure x
  Syntax.Fun.Abs.LitPat literal -> failure x
