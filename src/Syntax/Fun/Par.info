-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Syntax/Fun/Par.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pListVar -> ListVar                         (0)
	%start_pProgram -> Program                         (1)
	%start_pBinding -> Binding                         (2)
	%start_pListBinding -> ListBinding                 (3)
	%start_pExp -> Exp                                 (4)
	%start_pExp1 -> Exp1                               (5)
	%start_pExp2 -> Exp2                               (6)
	%start_pListExp2 -> ListExp2                       (7)
	%start_pCaseExp -> CaseExp                         (8)
	%start_pListCaseExp -> ListCaseExp                 (9)
	%start_pAtom -> Atom                               (10)
	%start_pListAtom -> ListAtom                       (11)
	%start_pLiteral -> Literal                         (12)
	%start_pPat -> Pat                                 (13)
	Integer -> L_integ                                 (14)
	Con -> L_Con                                       (15)
	Var -> L_Var                                       (16)
	ListVar ->                                         (17)
	ListVar -> Var ListVar                             (18)
	Program -> ListBinding                             (19)
	Binding -> Var ListVar '=' Exp                     (20)
	ListBinding ->                                     (21)
	ListBinding -> Binding                             (22)
	ListBinding -> Binding ';' ListBinding             (23)
	Exp -> 'case' Exp1 'of' '{' ListCaseExp '}'        (24)
	Exp -> 'let' Var '=' Exp1 'in' Exp                 (25)
	Exp -> 'letS' Var '=' Exp1 'in' Exp                (26)
	Exp -> Exp1                                        (27)
	Exp1 -> Con ListExp2                               (28)
	Exp1 -> Exp2 Exp2 ListExp2                         (29)
	Exp1 -> Exp2                                       (30)
	Exp2 -> Atom                                       (31)
	Exp2 -> '(' Exp ')'                                (32)
	ListExp2 ->                                        (33)
	ListExp2 -> Exp2 ListExp2                          (34)
	CaseExp -> Pat '->' Exp                            (35)
	ListCaseExp ->                                     (36)
	ListCaseExp -> CaseExp                             (37)
	ListCaseExp -> CaseExp ';' ListCaseExp             (38)
	Atom -> Var                                        (39)
	Atom -> Literal                                    (40)
	ListAtom ->                                        (41)
	ListAtom -> Atom ListAtom                          (42)
	Literal -> Integer                                 (43)
	Pat -> Con ListVar                                 (44)
	Pat -> Literal                                     (45)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'->'           { PT _ (TS _ 3) }
	';'            { PT _ (TS _ 4) }
	'='            { PT _ (TS _ 5) }
	'case'         { PT _ (TS _ 6) }
	'in'           { PT _ (TS _ 7) }
	'let'          { PT _ (TS _ 8) }
	'letS'         { PT _ (TS _ 9) }
	'of'           { PT _ (TS _ 10) }
	'{'            { PT _ (TS _ 11) }
	'}'            { PT _ (TS _ 12) }
	L_integ        { PT _ (TI $$) }
	L_Con          { PT _ (T_Con $$) }
	L_Var          { PT _ (T_Var $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pListVar rule  0
	%start_pProgram rule  1
	%start_pBinding rule  2
	%start_pListBinding rule  3
	%start_pExp     rule  4
	%start_pExp1    rule  5
	%start_pExp2    rule  6
	%start_pListExp2 rule  7
	%start_pCaseExp rule  8
	%start_pListCaseExp rule  9
	%start_pAtom    rule  10
	%start_pListAtom rule  11
	%start_pLiteral rule  12
	%start_pPat     rule  13
	Integer         rule  14
	Con             rule  15
	Var             rule  16
	ListVar         rules 17, 18
	Program         rule  19
	Binding         rule  20
	ListBinding     rules 21, 22, 23
	Exp             rules 24, 25, 26, 27
	Exp1            rules 28, 29, 30
	Exp2            rules 31, 32
	ListExp2        rules 33, 34
	CaseExp         rule  35
	ListCaseExp     rules 36, 37, 38
	Atom            rules 39, 40
	ListAtom        rules 41, 42
	Literal         rule  43
	Pat             rules 44, 45

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pListVar -> . ListVar                        (rule 0)

	L_Var          shift, and enter state 26
	%eof           reduce using rule 17

	Var            goto state 51
	ListVar        goto state 52

State 1

	%start_pProgram -> . Program                        (rule 1)

	L_Var          shift, and enter state 26
	%eof           reduce using rule 21

	Var            goto state 45
	Program        goto state 49
	Binding        goto state 46
	ListBinding    goto state 50

State 2

	%start_pBinding -> . Binding                        (rule 2)

	L_Var          shift, and enter state 26

	Var            goto state 45
	Binding        goto state 48

State 3

	%start_pListBinding -> . ListBinding                (rule 3)

	L_Var          shift, and enter state 26
	%eof           reduce using rule 21

	Var            goto state 45
	Binding        goto state 46
	ListBinding    goto state 47

State 4

	%start_pExp -> . Exp                                (rule 4)

	'('            shift, and enter state 35
	'case'         shift, and enter state 42
	'let'          shift, and enter state 43
	'letS'         shift, and enter state 44
	L_integ        shift, and enter state 15
	L_Con          shift, and enter state 20
	L_Var          shift, and enter state 26

	Integer        goto state 16
	Con            goto state 37
	Var            goto state 22
	Exp            goto state 40
	Exp1           goto state 41
	Exp2           goto state 39
	Atom           goto state 34
	Literal        goto state 25

State 5

	%start_pExp1 -> . Exp1                              (rule 5)

	'('            shift, and enter state 35
	L_integ        shift, and enter state 15
	L_Con          shift, and enter state 20
	L_Var          shift, and enter state 26

	Integer        goto state 16
	Con            goto state 37
	Var            goto state 22
	Exp1           goto state 38
	Exp2           goto state 39
	Atom           goto state 34
	Literal        goto state 25

State 6

	%start_pExp2 -> . Exp2                              (rule 6)

	'('            shift, and enter state 35
	L_integ        shift, and enter state 15
	L_Var          shift, and enter state 26

	Integer        goto state 16
	Var            goto state 22
	Exp2           goto state 36
	Atom           goto state 34
	Literal        goto state 25

State 7

	%start_pListExp2 -> . ListExp2                      (rule 7)

	'('            shift, and enter state 35
	L_integ        shift, and enter state 15
	L_Var          shift, and enter state 26
	%eof           reduce using rule 33

	Integer        goto state 16
	Var            goto state 22
	Exp2           goto state 32
	ListExp2       goto state 33
	Atom           goto state 34
	Literal        goto state 25

State 8

	%start_pCaseExp -> . CaseExp                        (rule 8)

	L_integ        shift, and enter state 15
	L_Con          shift, and enter state 20

	Integer        goto state 16
	Con            goto state 17
	CaseExp        goto state 31
	Literal        goto state 18
	Pat            goto state 30

State 9

	%start_pListCaseExp -> . ListCaseExp                (rule 9)

	L_integ        shift, and enter state 15
	L_Con          shift, and enter state 20
	%eof           reduce using rule 36

	Integer        goto state 16
	Con            goto state 17
	CaseExp        goto state 28
	ListCaseExp    goto state 29
	Literal        goto state 18
	Pat            goto state 30

State 10

	%start_pAtom -> . Atom                              (rule 10)

	L_integ        shift, and enter state 15
	L_Var          shift, and enter state 26

	Integer        goto state 16
	Var            goto state 22
	Atom           goto state 27
	Literal        goto state 25

State 11

	%start_pListAtom -> . ListAtom                      (rule 11)

	L_integ        shift, and enter state 15
	L_Var          shift, and enter state 26
	%eof           reduce using rule 41

	Integer        goto state 16
	Var            goto state 22
	Atom           goto state 23
	ListAtom       goto state 24
	Literal        goto state 25

State 12

	%start_pLiteral -> . Literal                        (rule 12)

	L_integ        shift, and enter state 15

	Integer        goto state 16
	Literal        goto state 21

State 13

	%start_pPat -> . Pat                                (rule 13)

	L_integ        shift, and enter state 15
	L_Con          shift, and enter state 20

	Integer        goto state 16
	Con            goto state 17
	Literal        goto state 18
	Pat            goto state 19

State 14

	Integer -> . L_integ                                (rule 14)

	L_integ        shift, and enter state 15


State 15

	Integer -> L_integ .                                (rule 14)

	'('            reduce using rule 14
	')'            reduce using rule 14
	'->'           reduce using rule 14
	';'            reduce using rule 14
	'in'           reduce using rule 14
	'of'           reduce using rule 14
	'}'            reduce using rule 14
	L_integ        reduce using rule 14
	L_Var          reduce using rule 14
	%eof           reduce using rule 14


State 16

	Literal -> Integer .                                (rule 43)

	'('            reduce using rule 43
	')'            reduce using rule 43
	'->'           reduce using rule 43
	';'            reduce using rule 43
	'in'           reduce using rule 43
	'of'           reduce using rule 43
	'}'            reduce using rule 43
	L_integ        reduce using rule 43
	L_Var          reduce using rule 43
	%eof           reduce using rule 43


State 17

	Pat -> Con . ListVar                                (rule 44)

	'->'           reduce using rule 17
	L_Var          shift, and enter state 26
	%eof           reduce using rule 17

	Var            goto state 51
	ListVar        goto state 66

State 18

	Pat -> Literal .                                    (rule 45)

	'->'           reduce using rule 45
	%eof           reduce using rule 45


State 19

	%start_pPat -> Pat .                                (rule 13)

	%eof           accept


State 20

	Con -> L_Con .                                      (rule 15)

	'('            reduce using rule 15
	')'            reduce using rule 15
	'->'           reduce using rule 15
	';'            reduce using rule 15
	'in'           reduce using rule 15
	'of'           reduce using rule 15
	'}'            reduce using rule 15
	L_integ        reduce using rule 15
	L_Var          reduce using rule 15
	%eof           reduce using rule 15


State 21

	%start_pLiteral -> Literal .                        (rule 12)

	%eof           accept


State 22

	Atom -> Var .                                       (rule 39)

	'('            reduce using rule 39
	')'            reduce using rule 39
	';'            reduce using rule 39
	'in'           reduce using rule 39
	'of'           reduce using rule 39
	'}'            reduce using rule 39
	L_integ        reduce using rule 39
	L_Var          reduce using rule 39
	%eof           reduce using rule 39


State 23

	ListAtom -> Atom . ListAtom                         (rule 42)

	L_integ        shift, and enter state 15
	L_Var          shift, and enter state 26
	%eof           reduce using rule 41

	Integer        goto state 16
	Var            goto state 22
	Atom           goto state 23
	ListAtom       goto state 65
	Literal        goto state 25

State 24

	%start_pListAtom -> ListAtom .                      (rule 11)

	%eof           accept


State 25

	Atom -> Literal .                                   (rule 40)

	'('            reduce using rule 40
	')'            reduce using rule 40
	';'            reduce using rule 40
	'in'           reduce using rule 40
	'of'           reduce using rule 40
	'}'            reduce using rule 40
	L_integ        reduce using rule 40
	L_Var          reduce using rule 40
	%eof           reduce using rule 40


State 26

	Var -> L_Var .                                      (rule 16)

	'('            reduce using rule 16
	')'            reduce using rule 16
	'->'           reduce using rule 16
	';'            reduce using rule 16
	'='            reduce using rule 16
	'in'           reduce using rule 16
	'of'           reduce using rule 16
	'}'            reduce using rule 16
	L_integ        reduce using rule 16
	L_Var          reduce using rule 16
	%eof           reduce using rule 16


State 27

	%start_pAtom -> Atom .                              (rule 10)

	%eof           accept


State 28

	ListCaseExp -> CaseExp .                            (rule 37)
	ListCaseExp -> CaseExp . ';' ListCaseExp            (rule 38)

	';'            shift, and enter state 64
	'}'            reduce using rule 37
	%eof           reduce using rule 37


State 29

	%start_pListCaseExp -> ListCaseExp .                (rule 9)

	%eof           accept


State 30

	CaseExp -> Pat . '->' Exp                           (rule 35)

	'->'           shift, and enter state 63


State 31

	%start_pCaseExp -> CaseExp .                        (rule 8)

	%eof           accept


State 32

	ListExp2 -> Exp2 . ListExp2                         (rule 34)

	'('            shift, and enter state 35
	')'            reduce using rule 33
	';'            reduce using rule 33
	'in'           reduce using rule 33
	'of'           reduce using rule 33
	'}'            reduce using rule 33
	L_integ        shift, and enter state 15
	L_Var          shift, and enter state 26
	%eof           reduce using rule 33

	Integer        goto state 16
	Var            goto state 22
	Exp2           goto state 32
	ListExp2       goto state 62
	Atom           goto state 34
	Literal        goto state 25

State 33

	%start_pListExp2 -> ListExp2 .                      (rule 7)

	%eof           accept


State 34

	Exp2 -> Atom .                                      (rule 31)

	'('            reduce using rule 31
	')'            reduce using rule 31
	';'            reduce using rule 31
	'in'           reduce using rule 31
	'of'           reduce using rule 31
	'}'            reduce using rule 31
	L_integ        reduce using rule 31
	L_Var          reduce using rule 31
	%eof           reduce using rule 31


State 35

	Exp2 -> '(' . Exp ')'                               (rule 32)

	'('            shift, and enter state 35
	'case'         shift, and enter state 42
	'let'          shift, and enter state 43
	'letS'         shift, and enter state 44
	L_integ        shift, and enter state 15
	L_Con          shift, and enter state 20
	L_Var          shift, and enter state 26

	Integer        goto state 16
	Con            goto state 37
	Var            goto state 22
	Exp            goto state 61
	Exp1           goto state 41
	Exp2           goto state 39
	Atom           goto state 34
	Literal        goto state 25

State 36

	%start_pExp2 -> Exp2 .                              (rule 6)

	%eof           accept


State 37

	Exp1 -> Con . ListExp2                              (rule 28)

	'('            shift, and enter state 35
	')'            reduce using rule 33
	';'            reduce using rule 33
	'in'           reduce using rule 33
	'of'           reduce using rule 33
	'}'            reduce using rule 33
	L_integ        shift, and enter state 15
	L_Var          shift, and enter state 26
	%eof           reduce using rule 33

	Integer        goto state 16
	Var            goto state 22
	Exp2           goto state 32
	ListExp2       goto state 60
	Atom           goto state 34
	Literal        goto state 25

State 38

	%start_pExp1 -> Exp1 .                              (rule 5)

	%eof           accept


State 39

	Exp1 -> Exp2 . Exp2 ListExp2                        (rule 29)
	Exp1 -> Exp2 .                                      (rule 30)

	'('            shift, and enter state 35
	')'            reduce using rule 30
	';'            reduce using rule 30
	'in'           reduce using rule 30
	'of'           reduce using rule 30
	'}'            reduce using rule 30
	L_integ        shift, and enter state 15
	L_Var          shift, and enter state 26
	%eof           reduce using rule 30

	Integer        goto state 16
	Var            goto state 22
	Exp2           goto state 59
	Atom           goto state 34
	Literal        goto state 25

State 40

	%start_pExp -> Exp .                                (rule 4)

	%eof           accept


State 41

	Exp -> Exp1 .                                       (rule 27)

	')'            reduce using rule 27
	';'            reduce using rule 27
	'}'            reduce using rule 27
	%eof           reduce using rule 27


State 42

	Exp -> 'case' . Exp1 'of' '{' ListCaseExp '}'       (rule 24)

	'('            shift, and enter state 35
	L_integ        shift, and enter state 15
	L_Con          shift, and enter state 20
	L_Var          shift, and enter state 26

	Integer        goto state 16
	Con            goto state 37
	Var            goto state 22
	Exp1           goto state 58
	Exp2           goto state 39
	Atom           goto state 34
	Literal        goto state 25

State 43

	Exp -> 'let' . Var '=' Exp1 'in' Exp                (rule 25)

	L_Var          shift, and enter state 26

	Var            goto state 57

State 44

	Exp -> 'letS' . Var '=' Exp1 'in' Exp               (rule 26)

	L_Var          shift, and enter state 26

	Var            goto state 56

State 45

	Binding -> Var . ListVar '=' Exp                    (rule 20)

	'='            reduce using rule 17
	L_Var          shift, and enter state 26

	Var            goto state 51
	ListVar        goto state 55

State 46

	ListBinding -> Binding .                            (rule 22)
	ListBinding -> Binding . ';' ListBinding            (rule 23)

	';'            shift, and enter state 54
	%eof           reduce using rule 22


State 47

	%start_pListBinding -> ListBinding .                (rule 3)

	%eof           accept


State 48

	%start_pBinding -> Binding .                        (rule 2)

	%eof           accept


State 49

	%start_pProgram -> Program .                        (rule 1)

	%eof           accept


State 50

	Program -> ListBinding .                            (rule 19)

	%eof           reduce using rule 19


State 51

	ListVar -> Var . ListVar                            (rule 18)

	'->'           reduce using rule 17
	'='            reduce using rule 17
	L_Var          shift, and enter state 26
	%eof           reduce using rule 17

	Var            goto state 51
	ListVar        goto state 53

State 52

	%start_pListVar -> ListVar .                        (rule 0)

	%eof           accept


State 53

	ListVar -> Var ListVar .                            (rule 18)

	'->'           reduce using rule 18
	'='            reduce using rule 18
	%eof           reduce using rule 18


State 54

	ListBinding -> Binding ';' . ListBinding            (rule 23)

	L_Var          shift, and enter state 26
	%eof           reduce using rule 21

	Var            goto state 45
	Binding        goto state 46
	ListBinding    goto state 75

State 55

	Binding -> Var ListVar . '=' Exp                    (rule 20)

	'='            shift, and enter state 74


State 56

	Exp -> 'letS' Var . '=' Exp1 'in' Exp               (rule 26)

	'='            shift, and enter state 73


State 57

	Exp -> 'let' Var . '=' Exp1 'in' Exp                (rule 25)

	'='            shift, and enter state 72


State 58

	Exp -> 'case' Exp1 . 'of' '{' ListCaseExp '}'       (rule 24)

	'of'           shift, and enter state 71


State 59

	Exp1 -> Exp2 Exp2 . ListExp2                        (rule 29)

	'('            shift, and enter state 35
	')'            reduce using rule 33
	';'            reduce using rule 33
	'in'           reduce using rule 33
	'of'           reduce using rule 33
	'}'            reduce using rule 33
	L_integ        shift, and enter state 15
	L_Var          shift, and enter state 26
	%eof           reduce using rule 33

	Integer        goto state 16
	Var            goto state 22
	Exp2           goto state 32
	ListExp2       goto state 70
	Atom           goto state 34
	Literal        goto state 25

State 60

	Exp1 -> Con ListExp2 .                              (rule 28)

	')'            reduce using rule 28
	';'            reduce using rule 28
	'in'           reduce using rule 28
	'of'           reduce using rule 28
	'}'            reduce using rule 28
	%eof           reduce using rule 28


State 61

	Exp2 -> '(' Exp . ')'                               (rule 32)

	')'            shift, and enter state 69


State 62

	ListExp2 -> Exp2 ListExp2 .                         (rule 34)

	')'            reduce using rule 34
	';'            reduce using rule 34
	'in'           reduce using rule 34
	'of'           reduce using rule 34
	'}'            reduce using rule 34
	%eof           reduce using rule 34


State 63

	CaseExp -> Pat '->' . Exp                           (rule 35)

	'('            shift, and enter state 35
	'case'         shift, and enter state 42
	'let'          shift, and enter state 43
	'letS'         shift, and enter state 44
	L_integ        shift, and enter state 15
	L_Con          shift, and enter state 20
	L_Var          shift, and enter state 26

	Integer        goto state 16
	Con            goto state 37
	Var            goto state 22
	Exp            goto state 68
	Exp1           goto state 41
	Exp2           goto state 39
	Atom           goto state 34
	Literal        goto state 25

State 64

	ListCaseExp -> CaseExp ';' . ListCaseExp            (rule 38)

	'}'            reduce using rule 36
	L_integ        shift, and enter state 15
	L_Con          shift, and enter state 20
	%eof           reduce using rule 36

	Integer        goto state 16
	Con            goto state 17
	CaseExp        goto state 28
	ListCaseExp    goto state 67
	Literal        goto state 18
	Pat            goto state 30

State 65

	ListAtom -> Atom ListAtom .                         (rule 42)

	%eof           reduce using rule 42


State 66

	Pat -> Con ListVar .                                (rule 44)

	'->'           reduce using rule 44
	%eof           reduce using rule 44


State 67

	ListCaseExp -> CaseExp ';' ListCaseExp .            (rule 38)

	'}'            reduce using rule 38
	%eof           reduce using rule 38


State 68

	CaseExp -> Pat '->' Exp .                           (rule 35)

	';'            reduce using rule 35
	'}'            reduce using rule 35
	%eof           reduce using rule 35


State 69

	Exp2 -> '(' Exp ')' .                               (rule 32)

	'('            reduce using rule 32
	')'            reduce using rule 32
	';'            reduce using rule 32
	'in'           reduce using rule 32
	'of'           reduce using rule 32
	'}'            reduce using rule 32
	L_integ        reduce using rule 32
	L_Var          reduce using rule 32
	%eof           reduce using rule 32


State 70

	Exp1 -> Exp2 Exp2 ListExp2 .                        (rule 29)

	')'            reduce using rule 29
	';'            reduce using rule 29
	'in'           reduce using rule 29
	'of'           reduce using rule 29
	'}'            reduce using rule 29
	%eof           reduce using rule 29


State 71

	Exp -> 'case' Exp1 'of' . '{' ListCaseExp '}'       (rule 24)

	'{'            shift, and enter state 79


State 72

	Exp -> 'let' Var '=' . Exp1 'in' Exp                (rule 25)

	'('            shift, and enter state 35
	L_integ        shift, and enter state 15
	L_Con          shift, and enter state 20
	L_Var          shift, and enter state 26

	Integer        goto state 16
	Con            goto state 37
	Var            goto state 22
	Exp1           goto state 78
	Exp2           goto state 39
	Atom           goto state 34
	Literal        goto state 25

State 73

	Exp -> 'letS' Var '=' . Exp1 'in' Exp               (rule 26)

	'('            shift, and enter state 35
	L_integ        shift, and enter state 15
	L_Con          shift, and enter state 20
	L_Var          shift, and enter state 26

	Integer        goto state 16
	Con            goto state 37
	Var            goto state 22
	Exp1           goto state 77
	Exp2           goto state 39
	Atom           goto state 34
	Literal        goto state 25

State 74

	Binding -> Var ListVar '=' . Exp                    (rule 20)

	'('            shift, and enter state 35
	'case'         shift, and enter state 42
	'let'          shift, and enter state 43
	'letS'         shift, and enter state 44
	L_integ        shift, and enter state 15
	L_Con          shift, and enter state 20
	L_Var          shift, and enter state 26

	Integer        goto state 16
	Con            goto state 37
	Var            goto state 22
	Exp            goto state 76
	Exp1           goto state 41
	Exp2           goto state 39
	Atom           goto state 34
	Literal        goto state 25

State 75

	ListBinding -> Binding ';' ListBinding .            (rule 23)

	%eof           reduce using rule 23


State 76

	Binding -> Var ListVar '=' Exp .                    (rule 20)

	';'            reduce using rule 20
	%eof           reduce using rule 20


State 77

	Exp -> 'letS' Var '=' Exp1 . 'in' Exp               (rule 26)

	'in'           shift, and enter state 82


State 78

	Exp -> 'let' Var '=' Exp1 . 'in' Exp                (rule 25)

	'in'           shift, and enter state 81


State 79

	Exp -> 'case' Exp1 'of' '{' . ListCaseExp '}'       (rule 24)

	'}'            reduce using rule 36
	L_integ        shift, and enter state 15
	L_Con          shift, and enter state 20

	Integer        goto state 16
	Con            goto state 17
	CaseExp        goto state 28
	ListCaseExp    goto state 80
	Literal        goto state 18
	Pat            goto state 30

State 80

	Exp -> 'case' Exp1 'of' '{' ListCaseExp . '}'       (rule 24)

	'}'            shift, and enter state 85


State 81

	Exp -> 'let' Var '=' Exp1 'in' . Exp                (rule 25)

	'('            shift, and enter state 35
	'case'         shift, and enter state 42
	'let'          shift, and enter state 43
	'letS'         shift, and enter state 44
	L_integ        shift, and enter state 15
	L_Con          shift, and enter state 20
	L_Var          shift, and enter state 26

	Integer        goto state 16
	Con            goto state 37
	Var            goto state 22
	Exp            goto state 84
	Exp1           goto state 41
	Exp2           goto state 39
	Atom           goto state 34
	Literal        goto state 25

State 82

	Exp -> 'letS' Var '=' Exp1 'in' . Exp               (rule 26)

	'('            shift, and enter state 35
	'case'         shift, and enter state 42
	'let'          shift, and enter state 43
	'letS'         shift, and enter state 44
	L_integ        shift, and enter state 15
	L_Con          shift, and enter state 20
	L_Var          shift, and enter state 26

	Integer        goto state 16
	Con            goto state 37
	Var            goto state 22
	Exp            goto state 83
	Exp1           goto state 41
	Exp2           goto state 39
	Atom           goto state 34
	Literal        goto state 25

State 83

	Exp -> 'letS' Var '=' Exp1 'in' Exp .               (rule 26)

	')'            reduce using rule 26
	';'            reduce using rule 26
	'}'            reduce using rule 26
	%eof           reduce using rule 26


State 84

	Exp -> 'let' Var '=' Exp1 'in' Exp .                (rule 25)

	')'            reduce using rule 25
	';'            reduce using rule 25
	'}'            reduce using rule 25
	%eof           reduce using rule 25


State 85

	Exp -> 'case' Exp1 'of' '{' ListCaseExp '}' .       (rule 24)

	')'            reduce using rule 24
	';'            reduce using rule 24
	'}'            reduce using rule 24
	%eof           reduce using rule 24


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 46
Number of terminals: 15
Number of non-terminals: 31
Number of states: 86
